# üîÑ LeetCode Problem 48: Rotate Image

## üìò Problem Statement

You're given an **n x n** 2D matrix representing an image.  
Your task is to **rotate** the image **90 degrees clockwise**, **in-place**.

### ‚ö†Ô∏è Constraints:
- You **must not** allocate another 2D matrix for the transformation.
- The matrix must be modified **in-place**.

---

## üß† Examples

### Example 1:

**Input:**
```
matrix = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
]
```

**Output:**
```
[
  [7, 4, 1],
  [8, 5, 2],
  [9, 6, 3]
]
```

### Example 2:

**Input:**
```
matrix = [
  [5, 1, 9, 11],
  [2, 4, 8, 10],
  [13, 3, 6, 7],
  [15, 14, 12, 16]
]
```

**Output:**
```
[
  [15, 13, 2, 5],
  [14, 3, 4, 1],
  [12, 6, 8, 9],
  [16, 7, 10, 11]
]
```

---

## üìö Constraints

- `n == matrix.length == matrix[i].length`
- `1 <= n <= 20`
- `-1000 <= matrix[i][j] <= 1000`

---

## ‚úÖ Java Solution

> üî¥ **This solution violates the in-place constraint** by creating a new matrix `result[][]`.  
> To be accepted in interviews or real submissions, consider the optimal in-place approach (transpose + reverse).

```java
class Solution {
    public void rotate(int[][] matrix) {
        int[][] result = new int[matrix.length][matrix.length];
        for(int i = 0; i < matrix.length ; i++) {
            for(int j = 0; j < matrix.length ; j++) {
                result[i][j]= matrix[matrix.length - j - 1][i];
            }
        }
        for(int i = 0; i < matrix.length ; i++) {
            for(int j = 0; j < matrix.length ; j++) {
                matrix[i][j] = result[i][j];
            }
        }
    }
}
```

---

## üêç Python Solution (In-place)

```python
class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        n = len(matrix)
        # Transpose
        for i in range(n):
            for j in range(i, n):
                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]
        # Reverse each row
        for row in matrix:
            row.reverse()
```

---

## üí† C++ Solution (In-place)

```cpp
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size();
        // Transpose
        for (int i = 0; i < n; ++i) {
            for (int j = i; j < n; ++j) {
                swap(matrix[i][j], matrix[j][i]);
            }
        }
        // Reverse each row
        for (int i = 0; i < n; ++i) {
            reverse(matrix[i].begin(), matrix[i].end());
        }
    }
};
```

---

## üßæ Analysis

| Metric               | Value            |
|----------------------|-----------------|
| **Time Complexity**  | O(n¬≤)            |
| **Space Complexity** | O(1) (in-place)  |
| **Approach**         | Transpose + Reverse |

---

## üß™ Test Cases

| Input Matrix | Output Matrix |
|--------------|----------------|
| `[[1]]` | `[[1]]` |
| `[[1,2],[3,4]]` | `[[3,1],[4,2]]` |
| `[[1,2,3],[4,5,6],[7,8,9]]` | `[[7,4,1],[8,5,2],[9,6,3]]` |

---

## üìå Conclusion

Rotating an image in-place is a **textbook matrix transformation problem**.  
The **transpose + reverse** trick is a go-to pattern and is often seen in system design interviews involving image transformations, matrix operations, or data reshaping.

> ‚ö†Ô∏è Creating a new matrix violates the problem's in-place requirement and **should be avoided** unless explicitly permitted.
```
